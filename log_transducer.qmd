---
title: "Logaritmic transducer with contant noise"
format: html
editor: visual
---

```{r}
library(tidyverse)

list.files("R", full.names = TRUE) |>  walk(source)
```

Transducer

```{r}
mu_log_fun <- function(x){
  log(x)
}


r_log_vectorized_fun <- function(x) {
  mu <- mu_log_fun(x)
  noise <- rnorm(length(x), # we create as many samples as values of xs we have
                 mean = 0, 
                 sd = 0.02) # Let's use the third component for the noise
  
  mu + noise
}
```

Raw_data:

```{r}

data_raw <- crossing(x = seq(0, 1, .05), n = 1:5000) |> 
  mutate(y = r_log_vectorized_fun(x))

```

Plot raw data:

```{r}

data_raw |> ggplot() + 
  geom_point(aes(x = x, y = y))

```

Plot with pdf distribution:

```{r}
pdf_fun_log <- function(y, p, x) {
  dnorm(y, 
        mean = mu_log_fun (x), 
        sd = p[3]) 
}


pdf_log <- crossing(x = seq(0, 1, .05), n = 1:5000) |> 
  mutate(y = r_log_vectorized_fun(x)) |> 
  mutate(f = pdf_fun_log(y, c(P1, P2, P3), x))

pdf_log |> 
  ggplot(aes(x = y, y = f)) +
  facet_wrap(vars(x), labeller = "label_both") +
  geom_line()
```


```{r}
pdf_log |> 
  ggplot(aes(x = y, y = f)) +
  facet_wrap(vars(x), labeller = "label_both", nrow = 1) +
  geom_line() +
  coord_flip()
```


```{r}
data <- data_raw |> group_by(x) |>  
  summarise(mean_y= mean(y), sd_y=sd(y)) |> 
  ungroup() |> 
  mutate(dmu = dmu(x, mean_y)) |> 
  drop_na() |> 
  mutate(delta = dmu/sd_y)
```

Plot mu (mean responses)

```{r}
data |> ggplot() + geom_line(aes(x = x, y= mean_y))
```

Plot delta (discrimination):

```{r}
data |> ggplot() + geom_line(aes(x= x, y= delta))
```
