---
title: "Discrimination from linear funcion and noise proportional to transducer"
format: html
editor: visual
---



```{r}
library(tidyverse)

list.files("R", full.names = TRUE) |>  walk(source)
```

## Values

```{r}
X_SEQ <- seq(0, 1 , .01)
P1 <- .1
P2 <- 2
P3 <- .2
P3_P <- 0.4
```

Transducers:

```{r}

mu_linear_fun <- function(p, x){
  p[1] + p[2] * x
}



r_lineal_vectorized_fun <- function(p, x) {
  mu <- mu_linear_fun(c(p[1], p[2]), x)
  noise <- rnorm(length(x), # we create as many samples as values of xs we have
                 mean = 0, 
                 sd = p[3]) # Let's use the third component for the noise
  noise_2 <- noise*mu #lo he hecho así, quizá está mal
  
  mu + noise_2
}


```

Raw_data:

```{r}

data_raw <- crossing(x = seq(0, 1, .05), n = 1:5000) |> 
  mutate(y = r_lineal_vectorized_fun(c(P1, P2, P3), x))

```

Plot raw data:

```{r}

data_raw |> ggplot() + 
  geom_point(aes(x = x, y = y))

```

```{r}
data <- data_raw |> group_by(x) |>  
  summarise(mean_y= mean(y), sd_y=sd(y)) |> 
  ungroup() |> 
  mutate(dmu = dmu(x, mean_y)) |> 
  drop_na() |> 
  mutate(delta = dmu/sd_y)
```

Plot mu (mean responses)

```{r}
data |> ggplot() + geom_line(aes(x = x, y= mean_y))
```

Plot delta (discrimination):

```{r}
data |> ggplot() + geom_line(aes(x= x, y= delta)) + 
  ylim(0, 20)
```

discrimination is proportional to transducer
